@model SDS_Dev.Models.RecyclableItem

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">
        <strong>Information: </strong> @TempData["ErrorMessage"]
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span>&times;</span>
        </button>
    </div>
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>RecyclableItem</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.RecyclableTypeId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.RecyclableTypeId,
                      new SelectList((System.Collections.IEnumerable)ViewData["RecyclableTypeOptions"], "Id", "Type"),
                      "Select a Type",
                      new { @class = "form-control", @id="TypeSelect" })
                @Html.ValidationMessageFor(model => model.RecyclableTypeId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Weight, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Weight, new { htmlAttributes = new { @class = "form-control", @id = "Weight" } })
                @Html.ValidationMessageFor(model => model.Weight, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ComputedRate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ComputedRate, new { htmlAttributes = new { @class = "form-control", @id="ComputedRate", @disabled= "true"} })
                @Html.ValidationMessageFor(model => model.ComputedRate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ItemDescription, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ItemDescription, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ItemDescription, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script>
    /* Take data from ViewData */
    var RecyclableTypeOptions = @Html.Raw(Json.Encode(ViewData["RecyclableTypeOptions"]));
    console.log(RecyclableTypeOptions)

    /* Event listener */
    document.getElementById("Weight").addEventListener('change', UpdateWeight);
    document.getElementById("TypeSelect").addEventListener('change', UpdateRate);

    var weight = 0.0;
    var rate = 1;
    /* Functions */
    function UpdateRate() {
        selectElement = document.querySelector('#TypeSelect');
        output = selectElement.value;
        r = RecyclableTypeOptions.find(x => x.Id == output).Rate;
        rate = r;
        UpdateComputedRate();
    }

    function UpdateWeight() {
        var w = parseFloat(document.getElementById("Weight").value);
        weight = w;
        UpdateComputedRate();
    }

    function UpdateComputedRate() {
        if (weight == undefined) {
            weight = 0;
        }
        if (rate == undefined) {
            rate = 0;
        }
        ComputedRate = weight * rate;
        document.getElementById("ComputedRate").value = ComputedRate.toFixed(2);
    }
</script>
}
